/**
 * Starter code with JUnit tests for code generation used in the class project in COP5556 Programming Language Principles 
 * at the University of Florida, Spring 2018.
 * 
 * This software is solely for the educational benefit of students 
 * enrolled in the course during the Spring 2018 semester.  
 * 
 * This software, and any software derived from it,  may not be shared with others or posted to public web sites,
 * either during the course or afterwards.
 * 
 *  @Beverly A. Sanders, 2018
 */


package cop5556sp18;

import static org.junit.Assert.*;

import java.awt.image.BufferedImage;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

import javax.swing.JFrame;

import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

import cop5556sp18.CodeGenUtils.DynamicClassLoader;
import cop5556sp18.AST.Program;

public class CodeGenTest {
	
	//determines whether show prints anything
	static boolean doPrint = true;
	
	static void show(Object s) {
		if (doPrint) {
			System.out.println(s);
		}
	}

	//determines whether a classfile is created
	static boolean doCreateFile = false;

	@Rule
	public ExpectedException thrown = ExpectedException.none();
	

	//values passed to CodeGenerator constructor to control grading and debugging output
	private boolean devel = true; //if true, print devel output
	private boolean grade = true; //if true, print grade output
	
//	private boolean devel = false; 
//	private boolean grade = false; 
	
	//sets the default width and height of newly created images.  Should be small enough to fit on screen.
	public static final int defaultWidth = 1024;
	public static final int defaultHeight = 1024;

	
	/**
	 * Generates bytecode for given input.
	 * Throws exceptions for Lexical, Syntax, and Type checking errors
	 * 
	 * @param input   String containing source code
	 * @return        Generated bytecode
	 * @throws Exception
	 */
	byte[] genCode(String input) throws Exception {
		
		//scan, parse, and type check
		Scanner scanner = new Scanner(input);
		show(input);
		scanner.scan();
		Parser parser = new Parser(scanner);
		Program program = parser.parse();
		TypeChecker v = new TypeChecker();
		program.visit(v, null);
//		show(program);  //It may be useful to show this here if code generation fails

		//generate code
		CodeGenerator cv = new CodeGenerator(devel, grade, null, defaultWidth, defaultHeight);
		byte[] bytecode = (byte[]) program.visit(cv, null);
		show(program); //doing it here shows the values filled in during code gen
		//display the generated bytecode
		show(CodeGenUtils.bytecodeToString(bytecode));
		
		//write byte code to file 
		if (doCreateFile) {
			String name = ((Program) program).progName;
			String classFileName = "bin/" + name + ".class";
			OutputStream output = new FileOutputStream(classFileName);
			output.write(bytecode);
			output.close();
			System.out.println("wrote classfile to " + classFileName);
		}
		
		//return generated classfile as byte array
		return bytecode;
	}
	
	/**
	 * Run main method in given class
	 * 
	 * @param className    
	 * @param bytecode    
	 * @param commandLineArgs  String array containing command line arguments, empty array if none
	 * @throws + 
	 * @throws Throwable 
	 */
	void runCode(String className, byte[] bytecode, String[] commandLineArgs) throws Exception  {
		RuntimeLog.initLog(); //initialize log used for grading.
		DynamicClassLoader loader = new DynamicClassLoader(Thread.currentThread().getContextClassLoader());
		Class<?> testClass = loader.define(className, bytecode);
		@SuppressWarnings("rawtypes")
		Class[] argTypes = {commandLineArgs.getClass()};
		Method m = testClass.getMethod("main", argTypes );
		show("Output from " + m + ":");  //print name of method to be executed
		Object passedArgs[] = {commandLineArgs};  //create array containing params, in this case a single array.
		try {
		m.invoke(null, passedArgs);	
		}
		catch (Exception e) {
			Throwable cause = e.getCause();
			if (cause instanceof Exception) {
				Exception ec = (Exception) e.getCause();
				throw ec;
			}
			throw  e;
		}
	}
	

	/**
	 * When invoked from JUnit, Frames containing images will be shown and then immediately deleted.
	 * To prevent this behavior, waitForKey will pause until a key is pressed.
	 * 
	 * @throws IOException
	 */
	void waitForKey() throws IOException {
		System.out.println("enter any char to exit");
		System.in.read();
	}

	/**
	 * When invoked from JUnit, Frames containing images will be shown and then immediately deleted.
	 * To prevent this behavior, keepFrame will keep the frame visible for 5000 milliseconds.
	 * 
	 * @throws Exception
	 */
	void keepFrame() throws Exception {
		Thread.sleep(5000);
	}
	
	
	
	


	/**
	 * Since we are not doing any optimization, the compiler will 
	 * still create a class with a main method and the JUnit test will
	 * execute it.  
	 * 
	 * The only thing it will do is append the "entering main" and "leaving main" messages to the log.
	 * 
	 * @throws Exception
	 */
	@Test
	public void emptyProg() throws Exception {
		String prog = "emptyProg";	
		String input = prog + "{}";
		byte[] bytecode = genCode(input);
		String[] commandLineArgs = {};
		runCode(prog, bytecode, commandLineArgs);
		show("Log:\n "+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
	

	
	@Test
	public void integerLit() throws Exception {
		String prog = "intgegerLit";
		String input = prog + "{int a; a:= 1; show a;} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;1;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void floatingLit() throws Exception {
		String prog = "floatLit";
		String input = prog + "{show 3.7; float a; a:= 1.3; show a;} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;3.7;1.3;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void booleanLit() throws Exception {
		String prog = "booleanLit";
		String input = prog + "{show true; boolean a; a:= false; show a;} ";	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;true;false;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void dec() throws Exception {
		String prog = "dec";
		String block = "{int a; float b; filename c; boolean d; image e;} ";
		String input = prog + block;	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void sleep() throws Exception {
		String prog = "sleepCase";
		String block = "{sleep 5; int a; a:= 3; sleep a;} ";
		String input = prog + block;	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; //create command line argument array to initialize params, none in this case		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void statementInput() throws Exception {
		String prog = "inputS";
		String block = "{image a; input a from @ 0; show a;} ";
		String input = prog + block;	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"ScreenShot.png", "7.8", "6", "5"}; 		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void statementAssign() throws Exception {
		String prog = "assignS";
		String block = "{image a; input a from @ 0; image b; b:= a;} ";
		String input = prog + block;	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"ScreenShot.png", "7.8", "6", "5"}; 		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void expressionBinary() throws Exception {
		String prog = "expressionBinary";
		String block = "{boolean a; a:= true; boolean c; c := false; boolean b; b:= a&c; show b;"
				+ "b:= a|c; show b; b:= a == c; show b; b:= a!=c; show b;} ";
		String input = prog + block;	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; 		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;false;true;false;true;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void expressionBinary2() throws Exception {
		String prog = "expressionBinary2";
		String block = "{float a; a:= 5.2; float c; c := 2.1; boolean b; b:= a>c; show b;"
				+ "b:= a<c; show b; b:= a == c; show b; b:= a!=c; show b;} ";
		String input = prog + block;	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; 		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;true;false;false;true;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void expressionBinary3() throws Exception {
		String prog = "expressionBinary3";
		String block = "{boolean a; a:= true; boolean c; c := false; boolean b; b:= a>c; show b;"
				+ "b:= a<c; show b; b:= a == c; show b; b:= a!=c; show b;} ";
		String input = prog + block;	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; 		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;true;false;false;true;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void expressionUnary() throws Exception {
		String prog = "expressionUnary";
		String block = "{boolean a; a:= true; boolean b; b:= +a; show b; b:= -a; show b; b:= !a; show b;} ";
		String input = prog + block;	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; 		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;true;true;false;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void expressionUnary2() throws Exception {
		String prog = "expressionUnary2";
		String block = "{int a; a:= 5; int b; b:= +a; show b; b:= -a; show b; b:= !a; show b;} ";
		String input = prog + block;	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; 		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;5;-5;-6;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void expressionUnary3() throws Exception {
		String prog = "expressionUnary3";
		String block = "{float a; a:= 3.5; float b; b:= +a; show b; b:= -a; show b;} ";
		String input = prog + block;	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; 		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;3.5;-3.5;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void ExpressionPredefinedName() throws Exception {
		String prog = "ExpressionPredefinedName";
		String block = "{show Z; show default_width; show default_height;} ";
		String input = prog + block;	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; 		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;255;1024;1024;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void ExpressionFunctionAppWithExpressionArg() throws Exception {
		String prog = "ExpressionFunctionAppWithExpressionArg";
		String block = "{float a; a := log(1.0); show a; a:= float(4); show a; int b; b := abs(-3); show b; "
				+ "b:= int(5.6); show b; b := int(1); show b;} ";
		String input = prog + block;	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; 		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;0.0;4.0;3;5;1;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void testBinary3() throws Exception {
		String prog = "prog";
		String block = "{show 9 + 4.5;show 9 - 4.5;show 9 * 4.5;show 8 / 4.2;show 9 ** 4.1;}";
		String input = prog + block;	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; 		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;13.5;4.5;40.5;1.904762;8173.239;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void testBinary4() throws Exception {
		String prog = "prog";
		String block = "{show 9.1 + 4;show 9.1 - 4;show 9.1 * 4;show 8.2 / 4;show 9.1 ** 4;}";
		String input = prog + block;	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; 		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;13.1;5.1000004;36.4;2.05;6857.497;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void unaryOpMinus() throws Exception {
		String prog = "prog";
		String block = "{show -3; show -4.5; show -3-4.5;}";
		String input = prog + block;	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; 		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;-3;-4.5;-7.5;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void testExpressionFuncArg2() throws Exception {
		String prog = "prog";
		String block = "{show abs(1); show abs(-1); show abs(5.3); show abs(-5.3); show abs(1-5.3);}";
		String input = prog + block;	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; 		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;1;1;5.3;5.3;4.3;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void unaryOpNot2() throws Exception {
		String prog = "prog";
		String block = "{show !1; show !-1; show !0; show !-2;}";
		String input = prog + block;	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; 		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;-2;0;-1;1;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void testExpressionFuncArg3() throws Exception {
		String prog = "prog";
		String block = "{int a; a := 123456789; show red(a); show green(a); show blue(a);}";
		String input = prog + block;	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; 		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;91;205;21;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void testExpressionFuncArg4() throws Exception {
		String prog = "prog";
		String block = "{int a; a := 123456789; show alpha(a); a := -1; show alpha(a);}";
		String input = prog + block;	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; 		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;7;255;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void testExpressionFuncArg1() throws Exception {
		String prog = "prog";
		String block = "{image b[512,256]; show b;} ";
		String input = prog + block;	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; 		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void testExpressionFuncArg6() throws Exception {
		String prog = "prog";
		String block = "{image b[512,256]; show width(b); show height(b);"
				              + "image c; show width(c); show height(c);} ";
		String input = prog + block;	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; 		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;512;256;1024;1024;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void testWrite6() throws Exception {
		String prog = "prog";
		String block = "{image b[512,256]; show b; filename a; input a from @ 0; write b to a;} ";
		String input = prog + block;	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"d.png", "9"}; 		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void testWhile() throws Exception {
		String prog = "prog";
		String block = "{int a; a:= 10; while(a > 0) {int b; b:= a - 1; a := b; show b;};} ";
		String input = prog + block;	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; 		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;9;8;7;6;5;4;3;2;1;0;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void testIf() throws Exception {
		String prog = "prog";
		String block = "{int a; a:= 10; if(a >= 0) {int b; b:= a - 1; show b;show a;};} ";
		String input = prog + block;	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; 		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;9;10;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void testLHSPixel() throws Exception {
		String prog = "prog";
		String block = "{image a; a [5, 10] := 6; show a [5, 10];} ";
		String input = prog + block;	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; 		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;6;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void testLHSSample() throws Exception {
		String prog = "prog";
		String block = "{image a; blue(a [5, 10]) := 10;} ";
		String input = prog + block;	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; 		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void testExpConditional() throws Exception {
		String prog = "prog";
		String block = "{show 3 > 5 ? 3: 5;} ";
		String input = prog + block;	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; 		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;5;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void testExpressionPixelConstructor() throws Exception {
		String prog = "prog";
		String block = "{int a; a := << alpha(1),red(2),green(3),blue(4)>>;} ";
		String input = prog + block;	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {}; 		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void testExpressionFunctionAppWithPixel1() throws Exception {
		String prog = "prog";
		String block = "{image a; input a from @ 0; show a[2.5,3.5];} ";
		String input = prog + block;	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"d.png", "9"}; 		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;0;leaving main;",RuntimeLog.globalLog.toString());
	}
	
	@Test
	public void testExpressionFunctionAppWithPixel2() throws Exception {
		String prog = "prog";
		String block = "{image a; image b; input a from @ 0; input b from @ 1; a[2.5,3.5] := b[2.3, 4.2];"
				+ "red(a[2.5, 3.5]) := b[2.5, 3.5];} ";
		String input = prog + block;	
		byte[] bytecode = genCode(input);		
		String[] commandLineArgs = {"d.png", "d.png"}; 		
		runCode(prog, bytecode, commandLineArgs);	
		show("Log:\n"+RuntimeLog.globalLog);
		assertEquals("entering main;leaving main;",RuntimeLog.globalLog.toString());
	}
}